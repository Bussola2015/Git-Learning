#somente a primeira vez
git clone https://github.com/Bussola2015/Git-Sketch.git

OBS: Se você já clonou um repositório com git clone, não precisa usar git init, pois o repositório já está inicializado.git clone https://github.com/sua-conta/seu-fork.gitgit clone https://github.com/sua-conta/seu-fork.gitgit clone https://github.com/sua-conta/seu-fork.git

git log
git log --oneline

#depois do clone, preciso sincronizar com origin (GitHub), utilizo pull
git pull https://github.com/Bussola2015/Git-Sketch.git
git status

#add arquivo area de staging - submetendo (disponivel para commit)
git add nome-arquivo1 nome-arquivo2
git add .

#comitando
git commit nome-arquivo1 -m "Descrição do commit para o arquivo 1"
git commit nome-arquivo2 -m "Descrição do commit para o arquivo 2"
git commit nome-arquivo3 -m "Descrição do commit para o arquivo 3"
ou 
#tudo de uma vez - vai depender se fazem parte do mesmo contexto de modificação, senão melhor fazer um de cada vez
git commit -m "alterei" 
ou
git commit . -m "alterei"

#me arrependi de monitorar/add quero desfazer submetido - retida do stage (mas continua com modoficações no workdir)
git restore nome-arquivo --staged nome-arquivo

#desrastreia o arquivo, ele continua existindo no sistema de arquivo e no diretório de trabalho - não é mais #rastreado pelo controle de versão
git rm --cached nome-arquivo   #remove
git commit -m "Remove nome-arquivo do rastreamento"    #para manter controle e legibilidade

OBS: Um arquivo criado no workdir não é automaticamente monitorado pelo Git, precisa explicitamente git add

#voltei a rastrear
git add nome-arquivo
#comite para manter o controle
git commit -m "Volta a rastrear nome-arquivo"

#desfaz as alterações no arquivo - undo
git restore nome-arquivo
git restore Rascunho
git restore index.html

#volta no tempo tudo
git restore --source 7b6a9ba .
#volta só um arquivo no tempo
git restore --source 7b6a9ba nome-arquivo
#comado generico
git restore --source code-hash nome-arquivo

#desvoltar do tempo
git revert c23ae2d
git revert code-hash
#desfaz no repo remoto
git push

#desfaz o último commit mas o(s) arquivo(s) continuam no staging
git reset --soft HEAD~1

#desfaz o commit e descarta as alterações - fora do stage - precisa add novamente - no workdir o arquivo ainda está #modificado
git reset --mixed HEAD~1

#config com repo github modo global - identificar quem é o autor dos commits
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

#config com repo github modo local - identificar quem é o autor dos commits
git config user.email "you@example.com"
git config user.name "Your Name"

#enviar para o Github
git push origin main
git push origin nova-branch  #git push origin dev

#se eu tiver certeza do que estou fazendo, pode forçar
git push origin main --force

# add outro repo
git remote add origin https://github.com/usuario/repo.git

#check se tem identificador definido
git config --list

.gitignore #pode ser encontrado no workdir, Github remoto e em subdiretórios

