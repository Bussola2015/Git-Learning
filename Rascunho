------------------------- GIT INIT

#somente a primeira vez
git clone https://github.com/Bussola2015/Git-Sketch.git

#posso clonar apenas uma branch
git clone --branch new_feature nome-repositorio
git clone --branch dev https://github.com/Bussola2015/Git-Sketch.git

#inicializa - diz para o Git, quero que esse diretorio seja meu workdir, passe a rastrear tudo aqui
git init

OBS: Se você já clonou um repositório com git clone, não precisa usar git init, pois o repositório já está inicializado.git clone https://github.com/sua-conta/seu-fork.gitgit clone https://github.com/sua-conta/seu-fork.gitgit clone https://github.com/sua-conta/seu-fork.git

--------------------------------------- GIT LOG

#history
git log
#history em uma linha cada
git log --oneline
#mais detalhes
git log -p 
#ver apenas determinado autor
git log --author="user_name"
#formatar a visualização
git log --pretty="format:%h %s"

----------------------------------GIT STATUS

#sempre para ver status atual
git status

---------------------------------- GIT ADD 

#add arquivo area de staging - submetendo (disponivel para commit) | Git passa a monitorar o arquivo/diretorio
git add nome-arquivo1 nome-arquivo2
git add .

#desrastreia o arquivo, ele continua existindo no sistema de arquivo e no diretório de trabalho - não é mais rastreado pelo controle de versão
git rm --cached nome-arquivo   #remove
git commit -m "Remove nome-arquivo do rastreamento"    #para manter controle e legibilidade

OBS: Um arquivo criado no workdir não é automaticamente monitorado pelo Git, precisa explicitamente git add

----------------------------------- GIT COMMIT

#comit individual - maior controle granular
git commit nome-arquivo1 -m "Descrição do commit para o arquivo 1"
git commit nome-arquivo2 -m "Descrição do commit para o arquivo 2"
git commit nome-arquivo3 -m "Descrição do commit para o arquivo 3"
ou 
#tudo de uma vez - vai depender se fazem parte do mesmo contexto de modificação, senão melhor fazer um de cada vez
git commit -m "alterei" 
ou
git commit . -m "alterei"

------------------------------------- GIT RESTORE|REVERT

#me arrependi de monitorar/add quero desfazer submetido - retida do stage (mas continua com modoficações no workdir)
git restore nome-arquivo --staged nome-arquivo

#voltei a rastrear
git add nome-arquivo
#comite para manter o controle
git commit -m "Volta a rastrear nome-arquivo"


#desfaz as alterações no arquivo - undo
git restore nome-arquivo
#Exemplo
git restore Rascunho
git restore index.html

#comado generico - volta ao ID do commit especifico apenas o arquivo mencionado - volta no tempo
git restore --source code-hash nome-arquivo

#volta só um arquivo no tempo
git restore --source 7b6a9ba index.html

#Exemplo
#volta no tempo tudo no workdir
git restore --soruce code-hash .
git restore --source 7b6a9ba .
git push

#desvoltar do tempo - Lembrando que eu ainbda poderia fazer o processo inverso
git revert c23ae2d
git revert code-hash
#desfaz no repo remoto se foi enviado para o remoto
git push

#desfaz o último commit mas o(s) arquivo(s) continuam no staging
git reset --soft HEAD~1

#desfaz o commit e descarta as alterações e tira do stage - precisa add novamente - no workdir o arquivo ainda está #modificado
git reset --mixed HEAD~1

--------------------------------------- GIT CONFIG

#config com repo github modo global - identificar quem é o autor dos commits
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

#config com repo github modo local - identificar quem é o autor dos commits
git config user.email "you@example.com"
git config user.name "Your Name"

--------------------------------------- GIT PUSH|PULL|REMOTE

#enviar para o Github
git push origin main
git push origin nova-branch  #git push origin dev

#se eu tiver certeza do que estou fazendo, pode forçar a escrita no remoto
git push origin main --force

#depois do clone, preciso sincronizar com origin (GitHub), utilizo pull
git pull https://github.com/Bussola2015/Git-Sketch.git
#se já tem vinculo não precisa colocar URL
git pull

#add outro repo ao workdir - posso ter quantos quiser e não somente o origin inicial
git remote add origin https://github.com/usuario/repo.git
#lista meus repo remoto vinculados
git remote -v  

#check se tem identificador definido
git config --list

------------------------------------ .GITIGNORE

.gitignore #pode ser encontrado no workdir, Github remoto e em subdiretórios


------------------------------------ BRANCH
#crio branch
git checkout -b nova-branch
ou 
git branch nome-nova-branch

#escolho a branch
git checkout nome-nova-branch
ou 
git switch nome-branch

#lista as branch e indica em qual branch estamos
git branch
git branch -v

#merge - fundir/unir uma branch na outra branch
#precisa estar no branch que será o DESTINO das mudanças - estou na dev quero merge com a main -> git switch main -> git merge dev (o inverso para main quero merge com a dev)
git merge nome-branch

